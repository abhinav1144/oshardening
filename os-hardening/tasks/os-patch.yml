---
- name: OS Patching for UBUNTU/DEBIAN and REDHAT/CENTOS
  become: yes
  debug:
    msg: "Patching is Started in {{ ansible_hostname }}"

- name: Upgrade kernel package on RHEL/CentOS server
  yum:
    name="kernel"
    state=latest
  when:  ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  register: yum_update

- name:  Upgrade kernel package on Ubuntu/Debian server
  apt:
    update_cache: yes
    force_apt_get: yes
    cache_valid_time: 3600
    name: linux-image-generic
    state: latest
  when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
  register: apt_update

- name: Check if reboot required after kernel update on CentOS/RedHat servers
  shell: KERNEL_NEW=$(rpm -q --last kernel |head -1 | awk '{print $1}' | sed 's/kernel-//'); KERNEL_NOW=$(uname -r); if [[ $KERNEL_NEW != $KERNEL_NOW ]]; then echo "reboot_needed"; else echo "reboot_not_needed"; fi
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  ignore_errors: true
  register: reboot_required

- name: Check if a reboot is required after kernel update on Ubuntu/Debian servers
  register: reboot_required_file
  stat: path=/var/run/reboot-required get_md5=no
  when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

- name: Reboot CentOS/RedHat systems if kernel updated
  command: shutdown -r +1  "Rebooting CentOS/RedHat Servers After Kernel Patching"
  async: 0
  poll: 0
  when: reboot_required.changed  and (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux')
  register: reboot_started_redhat
  ignore_errors: true

- name: Reboot box if kernel/libs updated and requested by the system
  shell: sleep 10 && /sbin/shutdown -r now 'Rebooting box to update system libs/kernel as needed'
  args:
    removes: /var/run/reboot-required
  async: 300
  poll: 0
  when: reboot_required_file.stat.exists and (ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian')
  register: reboot_started_ubuntu
  ignore_errors: true

- name:  Pause for 180 secs
  pause:
        minutes: 3
  when: reboot_started_redhat.changed

- name:  Pause for 180 secs
  pause:
        minutes: 3
  when: reboot_started_ubuntu.changed

- name: Check if all the systems responding to ssh
  local_action:
      module: wait_for
          host={{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}
          port=22
          search_regex=OpenSSH
          delay=15
          timeout=300
          state=started
- name: Implement SE-LINUX Role
  debug:
    msg: "IMPLEMENTING THE SE-LINUX ROLE"

- name: Implementing the SSH-Hardening
  debug: 

    msg: "SSH-Harending started"
